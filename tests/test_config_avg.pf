module test_config_avg
    use constants
    use greensroutines
    use config_avg
    use funit

    implicit none

contains

    @before
    subroutine set_up()
    end subroutine set_up

    @after
    subroutine tear_down()
    end subroutine tear_down

    @test
    subroutine one_component_avg()
        integer, parameter :: nconfig = 100
        integer, parameter :: nfreq = 10
        type(greensfunc) :: input(1,1,nconfig)
        type(greensfunc) :: output(1,1)
        type(standard_average) :: average_function
        complex(real12), parameter :: test_value = cmplx(1.2_real12,zero, real12)
        complex(real12) :: greensfn(1,1,nconfig)
        logical :: slice_ok(nfreq)
        integer :: i

        slice_ok = .false.
        call allocate_GF(input, nfreq)
        call allocate_GF(output, nfreq)
        
        greensfn = test_value 
        call initialise_GF(input, greensfn)
       

        call average_function%calculate(input, output)

        do concurrent (i=1:nfreq)
            if (abs(output(1,1)%GF(i) - test_value) <=tolerance) slice_ok(i) = .true.
        end do 

        @assertTrue(all(slice_ok))

    end subroutine one_component_avg

    @test
    subroutine one_comp_difflay_avg()
        integer, parameter :: nconfig = 100
        integer, parameter :: nfreq = 10
        type(greensfunc) :: input(1,1,nconfig)
        type(greensfunc) :: output(1,1)
        type(standard_average) :: average_function
        complex(real12), parameter :: test_value = cmplx(1.2_real12,zero, real12)
        logical :: slice_ok(nfreq)
        integer :: i, j

        slice_ok = .false.
        call allocate_GF(input, nfreq)
        call allocate_GF(output, nfreq)
        
        do concurrent (i=1:nconfig,j=1:nfreq)
            input(1,1,i)%GF(j)= test_value*real(j,real12)
        end do
        
        call average_function%calculate(input, output)


        do concurrent (i=1:nfreq)
            if (abs(output(1,1)%GF(i) - test_value*real(i,real12)) <=tolerance) slice_ok(i) = .true.
        end do 

        @assertTrue(all(slice_ok))

    end subroutine one_comp_difflay_avg

    @test
    subroutine sev_comp_difflay_avg()
        integer, parameter :: nconfig = 100
        integer, parameter :: nfreq = 10
        integer, parameter :: nx = 10, ny = 7
        type(greensfunc) :: input(nx,ny,nconfig)
        type(greensfunc) :: output(nx,ny)
        type(standard_average) :: average_function
        complex(real12), parameter :: test_value = cmplx(1.2_real12,zero, real12)
        logical :: slice_ok(nfreq)
        integer :: i, j, ix, iy

        slice_ok = .false.
        call allocate_GF(input, nfreq)
        call allocate_GF(output, nfreq)
        
        do concurrent (ix=1:nx, iy=1:ny,i=1:nconfig,j=1:nfreq)
            input(ix,iy,i)%GF(j)= test_value*real(j*ix*iy,real12)
        end do
        
        call average_function%calculate(input, output)


        do concurrent (ix=1:nx, iy=1:ny,i=1:nfreq)
            if (abs(output(ix,iy)%GF(i) - test_value*real(i*ix*iy,real12)) <=tolerance) slice_ok(i) = .true.
        end do 

        @assertTrue(all(slice_ok))

    end subroutine sev_comp_difflay_avg

    @test
    subroutine initialise_standard()
        class(config_average), allocatable :: average
        integer :: ierr = 1
        logical :: is_type = .false.
        character(50) :: name

        name = 'STANDARD'
        call initialise_average(name, average, ierr)

        select type (average)
        type is (standard_average)
            is_type = .true.
        class default
            is_type = .false.
        end select

        @assertEqual(ierr, 0)
        @assertTrue(is_type)

    end subroutine initialise_standard

    @test
    subroutine initialise_fail()
        class(config_average), allocatable :: average
        integer :: ierr = 0
        logical :: is_type = .false.
        character(50) :: name

        name = 'XCSFAS'
        call initialise_average(name, average, ierr)

        select type (average)
        type is (standard_average)
            is_type = .true.
        class default
            is_type = .false.
        end select

        @assertEqual(ierr, 1)
        @assertFalse(is_type)

    end subroutine initialise_fail

end module test_config_avg