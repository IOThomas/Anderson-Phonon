module test_random_config
    use funit
    use constants
    use random_config

    implicit none

contains

    @before
    subroutine set_up()
    end subroutine set_up

    @after
    subroutine tear_down()
    end subroutine tear_down

    @test
    subroutine initialise_binary()
        type(random_config_settings) :: settings
        class(random_config_base), allocatable :: generator
        integer :: ierr = 1
        logical :: is_type = .false.

        settings%generator_name = 'BINARY_ISOTOPIC'

        call initialise_random_config(settings, generator, ierr)

        select type (generator)
        type is (binary_isotopic_disorder)
            is_type = .true.
        class default
            is_type = .false.
        end select

        @assertEqual(ierr, 0)
        @assertTrue(is_type)

    end subroutine initialise_binary

    @test
    subroutine initialise_box()
        type(random_config_settings) :: settings
        class(random_config_base), allocatable :: generator
        integer :: ierr = 1
        logical :: is_type = .false.

        settings%generator_name = 'BOX'

        call initialise_random_config(settings, generator, ierr)

        select type (generator)
        type is (box_disorder)
            is_type = .true.
        class default
            is_type = .false.
        end select

        @assertEqual(ierr, 0)
        @assertTrue(is_type)

    end subroutine initialise_box

    @test
    subroutine set_and_get_binary()
        type(random_config_settings) :: settings, test_val
        type(binary_isotopic_disorder) :: generator

        settings%mass_0 = 0.5_real12
        settings%mass_impurity = 0.1_real12
        settings%impurity_concentration = 0.7_real12
        settings%generator_name = 'TEST'

        call generator%set(settings)
        test_val = generator%get()

        @assertEqual(test_val%generator_name, 'BINARY_ISOTOPIC')
        @assertEqual(test_val%mass_0, settings%mass_0)
        @assertEqual(test_val%mass_impurity, settings%mass_impurity)
        @assertEqual(test_val%impurity_concentration, settings%impurity_concentration)

    end subroutine set_and_get_binary

    @test
    subroutine set_and_get_box()
        type(random_config_settings) :: settings, test_val
        type(box_disorder) :: generator

        settings%disorder_strength = 0.56_real12
        settings%generator_name = 'TEST'

        call generator%set(settings)
        test_val = generator%get()

        @assertEqual(test_val%generator_name, 'BOX')
        @assertEqual(test_val%disorder_strength, settings%disorder_strength)

    end subroutine set_and_get_box

    @test
    subroutine binary_generate()
        type(random_config_settings) :: settings
        type(binary_isotopic_disorder) :: generator
        complex(real12) :: matrix(10, 10), peturbation
        logical :: conditions_met(10, 10)
        integer :: i, j

        conditions_met = .false.

        settings%mass_0 = 0.2_real12
        settings%mass_impurity = 0.5_real12
        settings%impurity_concentration = 0.35_real12

        peturbation%re = one - settings%mass_impurity/settings%mass_0
        peturbation%im = zero

        call generator%set(settings)
        matrix = generator%generate(size(matrix,1), size(matrix,2))

        where ((i /= j).and.(matrix == cmplx_zero))
            conditions_met = .true.
        elsewhere ((i == j).and.((matrix == cmplx_zero).or. (matrix == peturbation)))
            conditions_met = .true.
        end where

        @assertTrue(all(conditions_met))

    end subroutine binary_generate

    @test
    subroutine binary_zero_conc()
        type(random_config_settings) :: settings
        type(binary_isotopic_disorder) :: generator
        complex(real12) :: matrix(10, 10), peturbation
        integer :: i, j

        settings%mass_0 = 0.2_real12
        settings%mass_impurity = 0.5_real12
        settings%impurity_concentration = zero

        call generator%set(settings)
        matrix = generator%generate(size(matrix,1), size(matrix,2))

        @assertTrue(all(matrix == cmplx_zero))

    end subroutine binary_zero_conc

    @test
    subroutine binary_full_conc()
        type(random_config_settings) :: settings
        type(binary_isotopic_disorder) :: generator
        complex(real12) :: matrix(10, 10), peturbation
        logical :: conditions_met(10, 10)
        integer :: i, j

        conditions_met = .false.

        settings%mass_0 = 0.2_real12
        settings%mass_impurity = 0.5_real12
        settings%impurity_concentration = one

        peturbation%re = one - settings%mass_impurity/settings%mass_0
        peturbation%im = zero

        call generator%set(settings)
        matrix = generator%generate(size(matrix,1), size(matrix,2))

        ! doing this with a where construct failed for no obvious reason!
        do concurrent (i=1:size(matrix,1), j=1:size(matrix,2))
            if ((i/=j).and.(matrix(i,j) == cmplx_zero)) then 
                conditions_met = .true.
            elseif ((i==j).and.(matrix(i,j)==peturbation)) then
                conditions_met = .true.
            end if 
        end do

        @assertTrue(all(conditions_met))

    end subroutine binary_full_conc


    @test
    subroutine box_generate()
        type(random_config_settings) :: settings
        type(box_disorder) :: generator

        complex(real12) :: matrix(10, 10)
        real(real12) :: peturbation
        logical :: conditions_met(10, 10)
        integer :: i, j

        conditions_met = .false.
        settings%disorder_strength = 0.5_real12
        peturbation = settings%disorder_strength

        call generator%set(settings)
        matrix = generator%generate(size(matrix,1), size(matrix,2))

        do concurrent (i = 1:size(matrix,1), j = 1:size(matrix,2))
            if ((i /= j).and.(matrix(i,j) == cmplx_zero)) then
                conditions_met(i,j) = .true.
            elseif ((i == j).and.(abs(matrix(i,j))> zero).and.(abs(matrix(i,j)) <= peturbation).and.(matrix(i,j)%im == zero)) then
                conditions_met(i,j) = .true.
            end if
        end do

        @assertTrue(all(conditions_met))

    end subroutine box_generate

    @test
    subroutine box_zero_str()
        type(random_config_settings) :: settings
        type(box_disorder) :: generator

        complex(real12) :: matrix(10, 10)
        real(real12) :: peturbation
        logical :: conditions_met(10, 10)
        integer :: i, j

        settings%disorder_strength = zero

        call generator%set(settings)
        matrix = generator%generate(size(matrix,1), size(matrix,2))

        @assertTrue(all(matrix == cmplx_zero))
    
    end subroutine box_zero_str
        

end module test_random_config