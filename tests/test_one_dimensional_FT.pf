module test_one_dimensional_FT

    use constants, only: real12
    use one_dimensional_FT, only: oneD_FT_initplan, oneD_FT_killplan, oneD_fft, forward_fft, backward_fft &
        & init_oneDplan, oneDwork_in, oneDwork_out, oneD_plan_forward, oneD_plan_backward

    implicit none
    integer, parameter :: size = 20
    complex(real12) :: test(size)

contains

    @before
    subroutine set_up()
    end subroutine set_up

    @after
    subroutine tear_down()
        integer :: ierr

        if (init_oneDplan) call oneD_FT_killplan(ierr)

    end subroutine tear_down

    @test
    subroutine test_init_kill_cycle()
        integer :: ierr = -1

        @assertFalse(init_oneDplan)
        @assertFalse((allocated(oneDwork_in)) .and. (allocated(oneDwork_out)))
        @assertFalse(c_associated(oneD_plan_forward))
        @assertFalse(c_associated(oneD_plan_backward))
        @assertFalse(c_associated(oneD_plan_forward, c_null_ptr))
        @assertFalse(c_associated(oneD_plan_backward, c_null_ptr))

        call oneD_FT_initplan(test, ierr)
        @assertEqual(0, ierr)
        @assertTrue(init_oneDplan)
        @assertTrue((allocated(oneDwork_in)) .and. (allocated(oneDwork_out)))
        @assertTrue(c_associated(oneD_plan_forward))
        @assertTrue(c_associated(oneD_plan_backward))
        @assertFalse(c_associated(oneD_plan_forward, c_null_ptr))
        @assertFalse(c_associated(oneD_plan_backward, c_null_ptr))

        ierr = -1
        call oneD_FT_killplan(ierr)
        @assertEqual(0, ierr)
        @assertFalse(init_oneDplan)
        @assertFalse((allocated(oneDwork_in)) .and. (allocated(oneDwork_out)))
        @assertTrue(c_associated(oneD_plan_forward))
        @assertTrue(c_associated(oneD_plan_backward))
        @assertFalse(c_associated(oneD_plan_forward, c_null_ptr))
        @assertFalse(c_associated(oneD_plan_backward, c_null_ptr))

    end subroutine test_init_kill_cycle

    @test
    subroutine test_kill_without_init()
        integer :: ierr = -1

        call oneD_FT_killplan(ierr)
        @assertEqual(1, ierr)

    end subroutine test_kill_without_init

    @test
    subroutine test_init_twice()
        integer :: ierr = -1

        call oneD_FT_initplan(test, ierr)
        @assertEqual(0, ierr)
        call oneD_FT_initplan(test, ierr)
        @assertEqual(1, ierr)

    end subroutine test_init_twice

    @test
    subroutine test_fft_without_init()
        integer :: ierr = -1

        call oneD_fft(test, forward_fft, ierr)
        @assertEqual(1, ierr)

    end subroutine test_fft_without_init

    @test
    subroutine test_fft_wrong_trans_flag()
        integer :: ierr = -1

        call oneD_FT_initplan(test, ierr)
        @assertEqual(0, ierr)

        call oneD_fft(test, 0, ierr)
        @assertEqual(2, ierr)
    end subroutine test_fft_wrong_trans_flag

    @test
    subroutine test_fft_array_too_big()
        integer :: ierr = -1
        complex(real12) :: test_big(100)

        call oneD_FT_initplan(test, ierr)
        @assertEqual(0, ierr)

        ierr = -1
        call oneD_fft(test_big, 0, ierr)
        @assertEqual(3, ierr)

    end subroutine test_fft_array_too_big

    @test
    subroutine test_fft_array_too_small()
        integer :: ierr = -1
        complex(real12) :: test_small(5)

        call oneD_FT_initplan(test, ierr)
        @assertEqual(0, ierr)

        call oneD_fft(test_small, 0, ierr)
        @assertEqual(4, ierr)
    end subroutine test_fft_array_too_small

    subroutine test_fft_forward_then_back()
    end subroutine test_fft_forward_then_back

end module test_one_dimensional_FT
