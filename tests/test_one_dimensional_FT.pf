module test_one_dimensional_FT

    use funit
    use constants, only: real12, cmplx_zero, pi, two, one
    use, intrinsic :: iso_c_binding
    use greensroutines, only: greensfunc, allocate_GF
    use one_dimensional_FT, only: oneD_FT_initplan, oneD_FT_killplan, oneD_fft, forward_fft, backward_fft, &
        & init_oneDplan, oneDwork_in, oneDwork_out, oneD_plan_forward, oneD_plan_backward

    implicit none
    integer, parameter :: max_n = 20
    complex(real12) :: input_test(max_n)
    type(greensfunc) :: gf_input(max_n)

contains

    @before
    subroutine set_up()
        input_test = cmplx_zero
    end subroutine set_up

    @after
    subroutine tear_down()
        integer :: ierr
        integer :: i

        if (init_oneDplan) call oneD_FT_killplan(ierr)
        input_test = cmplx_zero

        do i = 1, max_n
            if (allocated(gf_input(i)%GF)) deallocate (gf_input(i)%GF)
        end do

    end subroutine tear_down

    @test
    subroutine test_init_kill_cycle()
        integer :: ierr = -1

        @assertFalse(init_oneDplan)
        @assertFalse((allocated(oneDwork_in)) .and. (allocated(oneDwork_out)))
        @assertFalse(c_associated(oneD_plan_forward))
        @assertFalse(c_associated(oneD_plan_backward))
        @assertFalse(c_associated(oneD_plan_forward, c_null_ptr))
        @assertFalse(c_associated(oneD_plan_backward, c_null_ptr))

        call oneD_FT_initplan(input_test, ierr)
        @assertEqual(0, ierr)
        @assertTrue(init_oneDplan)
        @assertTrue((allocated(oneDwork_in)) .and. (allocated(oneDwork_out)))
        @assertTrue(c_associated(oneD_plan_forward))
        @assertTrue(c_associated(oneD_plan_backward))
        @assertFalse(c_associated(oneD_plan_forward, c_null_ptr))
        @assertFalse(c_associated(oneD_plan_backward, c_null_ptr))

        ierr = -1
        call oneD_FT_killplan(ierr)
        @assertEqual(0, ierr)
        @assertFalse(init_oneDplan)
        @assertFalse((allocated(oneDwork_in)) .and. (allocated(oneDwork_out)))
        @assertTrue(c_associated(oneD_plan_forward))
        @assertTrue(c_associated(oneD_plan_backward))
        @assertFalse(c_associated(oneD_plan_forward, c_null_ptr))
        @assertFalse(c_associated(oneD_plan_backward, c_null_ptr))

    end subroutine test_init_kill_cycle

    @test
    subroutine test_kill_without_init()
        integer :: ierr = -1

        call oneD_FT_killplan(ierr)
        @assertEqual(1, ierr)

    end subroutine test_kill_without_init

    @test
    subroutine test_init_twice()
        integer :: ierr = -1

        call oneD_FT_initplan(input_test, ierr)
        @assertEqual(0, ierr)
        call oneD_FT_initplan(input_test, ierr)
        @assertEqual(1, ierr)

    end subroutine test_init_twice

    @test
    subroutine test_fft_without_init()
        integer :: ierr = -1

        call allocate_GF(gf_input, 1)
        call oneD_fft(gf_input, forward_fft, ierr)
        @assertEqual(1, ierr)

    end subroutine test_fft_without_init

    @test
    subroutine test_fft_wrong_trans_flag()
        integer :: ierr = -1

        call allocate_GF(gf_input, 1)

        call oneD_FT_initplan(input_test, ierr)
        @assertEqual(0, ierr)

        call oneD_fft(gf_input, 0, ierr)
        @assertEqual(2, ierr)

    end subroutine test_fft_wrong_trans_flag

    @test
    subroutine test_fft_array_too_big()
        integer :: ierr = -1
        type(greensfunc) :: test_big(100)

        call allocate_GF(test_big, 1)

        call oneD_FT_initplan(input_test, ierr)
        @assertEqual(0, ierr)

        ierr = -1
        call oneD_fft(test_big, forward_fft, ierr)
        @assertEqual(3, ierr)

    end subroutine test_fft_array_too_big

    @test
    subroutine test_fft_array_too_small()
        integer :: ierr = -1
        type(greensfunc) :: test_small(5)

        call oneD_FT_initplan(input_test, ierr)
        @assertEqual(0, ierr)

        call oneD_fft(test_small, forward_fft, ierr)
        @assertEqual(3, ierr)
    end subroutine test_fft_array_too_small

    @test
    subroutine test_fft_forward_then_back()
        complex(real12) :: expected_real_sp(max_n)
        complex(real12) :: expected_mom_sp(max_n)
        complex(real12), parameter :: a_const(max_n) = cmplx(0.2, 0.1, real12)
        integer :: i
        integer, parameter :: nmax_array(max_n) = max_n
        integer, parameter :: n_array(max_n) = [(i, i=1, max_n)]
        integer :: ierr = -1

        expected_real_sp = real_space_function(a_const, n_array)
        expected_mom_sp = momentum_space_function(a_const, n_array, nmax_array)

        call allocate_GF(gf_input, 1)

        do i = 1, max_n
            gf_input(i)%GF(1) = expected_real_sp(i)
        end do

        call oneD_FT_initplan(input_test, ierr)
        @assertEqual(0, ierr)

        ierr = -1
        call oneD_fft(gf_input, forward_fft, ierr)
        do i = 1, max_n
            input_test(i) = gf_input(i)%GF(1)
        end do

        @assertEqual(0, ierr)
        @assertEqual(expected_mom_sp, input_test)

        ierr = -1
        call oneD_fft(gf_input, backward_fft, ierr)
        do i = 1, max_n
            input_test(i) = gf_input(i)%GF(1)
        end do

        @assertEqual(0, ierr)
        @assertEqual(expected_real_sp, input_test)

    contains

        elemental function real_space_function(a, n)
            complex(real12) :: real_space_function
            complex(real12), intent(in) :: a
            integer, intent(in):: n

            real_space_function = a**n
        end function real_space_function

        elemental function momentum_space_function(a, n, nmax)
            complex(real12) :: momentum_space_function
            complex(real12), intent(in) :: a
            integer, intent(in) :: n, nmax

            complex(real12) :: testval
            complex(real12) :: numerator, denominator
            real(real12) :: ratio

            ratio = real(n, real12)/real(nmax, real12)
            testval = cmplx(0, two*pi*ratio, real12)

            if (a == exp(testval)) then
                momentum_space_function = nmax
            else
                numerator = one - a**nmax
                denominator = one - a*exp(-testval)
                momentum_space_function = numerator/denominator
            end if

        end function momentum_space_function

    end subroutine test_fft_forward_then_back

end module test_one_dimensional_FT
