module test_greensroutines
   use constants
   use defined_types
   use greensroutines
   use greensroutines_helper
   use funit

contains

   @test
   subroutine  test_allocateGF_sizes()
      integer, parameter            :: array_size = 2
      type(greensfunc), allocatable :: testGF(:, :, :)
      integer                       :: ierr
      logical                       :: GFsize_prob = .false.
      integer                       :: i, j, k, itest

      call allocateGF(testGF, array_size, array_size, array_size, array_size, ierr)

      @assertEqual(size(testGF, 1), array_size)
      @assertEqual(size(testGF, 2), array_size)
      @assertEqual(size(testGF, 3), array_size)
      @assertEqual(ierr, 0)

      do i = 1, array_size
     	   if (GFsize_prob)  exit
     	   do j = 1, array_size
	         if (GFsize_prob) exit
	         do k = 1, array_size
	            itest_= size(testGF(i, j, k)%GF, 1)
	            if (itest.ne.array_size) then
	      	      GFsize_prob = .true.
		            exit
	            end if
	         enddo
	      enddo
      enddo

      @assertFalse(GFsize_prob)
      deallocate(testGF)
   end subroutine

   @test
   subroutine test_allocateGF_ierr_code1()
      integer, parameter            :: array_size = 2
      integer, parameter            :: array_wrong = -10
      type(greensfunc), allocatable :: testGF(:, :, :)
      integer                       :: ierr

      call allocateGF(testGF, array_wrong, array_size, array_size, array_size,&
     	   ierr)
      @assertEqual(ierr, 1)
     

      call allocateGF(testGF, array_size, array_wrong, array_size, array_size,&
     	  ierr)
      @assertEqual(ierr, 1)
     

      call allocateGF(testGF, array_size, array_size, array_wrong, array_size,&
     	   ierr)
      @assertEqual(ierr, 1)
    

      call allocateGF(testGF, array_wrong, array_size, array_size, array_wrong,&
     	   ierr)
      @assertEqual(ierr, 1)
     
   end subroutine

   @test
   subroutine test_allocateGF_ierr_code2()
      integer, parameter            :: array_size = 2
      type(greensfunc), allocatable :: testGF(:, :, :)
      integer                       :: ierr

      allocate(testGF(array_size,array_size,array_size))
      call allocateGF(testGF, array_size, array_size, array_size, array_size,&
     	  ierr)
      @assertEqual(ierr, 2)
      deallocate(testGF)
   end subroutine

   @test
   subroutine test_calculateGF_output_withhyb()
      type(greensfunc)           :: testGF(2, 2, 2)
      type(greensfunc)           :: testHyb(2, 2, 2)
      type(kappagrid)            :: testdisp(2, 2, 2)
      complex(real12)            :: slice(2, 2, 2)
      integer, parameter         :: array_size = 2
      integer                    :: i, j , k, l, ierr
      real(real12), parameter    :: Hybval = 1.0_real12
      real(real12), parameter    :: Dispval = 1.0_real12
      complex(real12), parameter :: Deltamom = (2.0_real12, zero)
      real(real12), parameter    :: test_val(2) = [one/2.0_real12,zero one/14.0_real12]
      logical                    :: outwh_prob = .false.

     
      do i = 1, array_size
         do j = 1, array_size
	         do k = 1, array_size
	            testdisp(i, j, k)%omega2 = Dispval
	            allocate(testGF(i, j, k)%GF(array_size))
	            allocate(testHyb(i, j, k)%GF(array_size))
	            do l=1, array_size
	       	      testHyb(i, j, k)%GF(l) = Hybval
	            enddo
	         enddo
	      enddo
      enddo

      call calculateGF(testGF, deltamom, testdisp, testhyb, ierr)
      @assertEqual(ierr, 0)

      do i = 1, array_size
         slice = cmplx(test_val(i), zero, real12)
         outnoh_prob = any(does_GF_element_have_problem(testGF, i, slice))
         if (outnoh_prob) exit
      enddo

      @assertFalse(outwh_prob)

   end subroutine

   @test
   subroutine test_calculateGF_output_withouthyb()
         type(greensfunc)           :: testGF(2, 2, 2)
         type(greensfunc)           :: testHyb(2, 2, 2)
         type(kappagrid)            :: testdisp(2, 2, 2)
         complex(real12)            :: slice(2, 2, 2)
         integer, parameter         :: array_size = 2
         integer                    :: i, j , k, l, ierr
         real(real12), parameter    :: Dispval = 1.0_real12
         complex(real12), parameter :: Deltamom = (2.0_real12, zero)
         real(real12), parameter    :: test_val(2) = [one/3.0_real12, one/15.0_real12]
         logical                    :: outnoh_prob = .false.

            
         do i = 1, array_size
            do j = 1, array_size
               do k = 1, array_size
                  testdisp(i, j, k)%omega2 = Dispval
                  allocate(testGF(i, j, k)%GF(array_size))
               enddo
            enddo
         enddo

         call calculateGF(GFval = testGF, deltaw = deltamom, dispersion = testdisp, ierr = ierr)
         @assertEqual(ierr,0)

         do i = 1, array_size
            slice = cmplx(test_val(i), zero, real12)
            outnoh_prob = any(does_GF_element_have_problem(testGF, i, slice))
            if (outnoh_prob) exit
         enddo

         @assertFalse(outnoh_prob)

   end subroutine

   @test
   subroutine test_calculateGF_divbyzero()
      type(greensfunc)           :: testGF(2, 2, 2)
      type(greensfunc)           :: testHyb(2, 2, 2)
      type(kappagrid)            :: testdisp(2, 2, 2)
      integer, parameter         :: array_size = 2
      integer                    :: i, j , k, l, ierr
      real(real12), parameter    :: Hybval = 1.0_real12
      real(real12), parameter    :: Dispval = 1.0_real12
      complex(real12), parameter :: Deltamom = 2.0_real12
      real(real12), parameter    :: test_val1 = 2.0_real12
      real(real12), parameter    :: test_val2 = 14.0_real12
      logical                    :: outwh_prob = .false.

     
      do i = 1, array_size
         do j = 1, array_size
            do k = 1, array_size
               testdisp(i, j, k)%omega2 = Dispval
               allocate(testGF(i, j, k)%GF(array_size))
               allocate(testHyb(i, j, k)%GF(array_size))
               do l=1, array_size
                  testHyb(i, j, k)%GF(l) = Hybval
               enddo
            enddo
         enddo
      enddo
     
      !set inputs so have division by zero at a given point
      testdisp(2, 1, 2)%omega2 = 2.0_real12
      testHyb(2, 1, 2)%GF(1) = 2.0_real12

      call calculateGF(testGF, deltamom, testdisp, testhyb, ierr)
      @assertEqual(ierr, 1)

   end subroutine

   @test
   subroutine test_GF_copying() 
      type(greensfunc), allocatable :: original(:, :, :)
      type(greensfunc), allocatable :: copy(:, :, :)
      integer, parameter            :: arraysize = 2
      integer, parameter            :: testmap(2, 2, 2) = 2
      complex(real12), parameter    :: testGF(2, 2, 2) = (two, two)
      integer                       :: i, j, k, l, ierr
      logical                       :: copymap_prob = .false.
      logical                       :: copyGF_prob = .false.

      call allocateGF(original, arraysize, arraysize, arraysize, arraysize, ierr)
      @assertEqual(ierr, 0)

      call allocateGF(copy, arraysize, arraysize, arraysize, arraysize, ierr)
      @assertEqual(ierr, 0)

     
      do i = 1, arraysize
     	   do j = 1, arraysize
	         do k = 1, arraysize
	            original(i, j, k)%map = testmap(i, j, k)
	            do l = 1, arraysize
		            original(i, j, k)%GF(l) = testGF(i, j, k)
	            enddo
	         enddo
	      enddo
      enddo

      call copymap(copy, original)
      call copyGF(copy, original)

      copymap_prob = any(does_map_have_problem(copy, test_map))
      copyGF_prob = any(does_GF_have_problem(copy, testGF))
    
      @assertFalse(copyGF_prob)
      @assertFalse(copymap_prob)
      deallocate(original, copy)

   end subroutine

   @test
   subroutine test_GF_invert()
      type(greensfunc), allocatable :: test(:, :, :)
      integer, parameter            :: arraysize = 2
      integer, parameter            :: testmap = 2
      real(real12), parameter       :: testGF = two
      complex(real12), parameter    :: GFans(array_size, array_size, array_size) = (0.5_real12, zero)
      integer                       :: i, j, k, l, ierr
      integer, allocatable          :: ierr1(:, :, :)
      logical                       :: invertGF_prob = .false.

      call allocateGF(test, arraysize, arraysize, arraysize, arraysize,&
         ierr)
      @assertEqual(ierr, 0)

      allocate(ierr1(arraysize, arraysize, arraysize))
      
      do i = 1, arraysize
         do j = 1, arraysize
            do k = 1, arraysize
               test(i, j, k)%map = testmap
               do l = 1, arraysize
                  test(i, j, k)%GF(l) = cmplx(testGF, zero)
               enddo
            enddo
         enddo
      enddo

      call invertGF(test, ierr1)
      @assertTrue(all(ierr1 ==  0))
      
      invertGF_prob = any(does_GF_have_problem(test, GFans))
      
      @assertFalse(invertGF_prob)
      
      deallocate(test,ierr1)
   end subroutine

   @test
   subroutine test_GFinvert_ierr_divby0()
      type(greensfunc), allocatable :: test(:, :, :)
      integer, parameter            :: arraysize = 2
      integer, parameter            :: testmap = 2
      real(real12), parameter       :: testGF = two
      integer                       :: i, j, k, l, ierr
      integer, allocatable          :: ierr_invertGF(:, :, :)

      call allocateGF(test, arraysize, arraysize, arraysize, arraysize,&
         ierr)
      @assertEqual(ierr, 0)

      allocate(ierr_invertGF(arraysize, arraysize, arraysize))
      
      do i = 1, arraysize
         do j = 1, arraysize
            do k = 1, arraysize
               test(i, j, k)%map = testmap
               do l = 1, arraysize
                  test(i, j, k)%GF(l) = cmplx(testGF, zero)
               enddo
            enddo
         enddo
      enddo

      test(2, 1, 1)%GF(2) = zero

      call invertGF(test, ierr_invertGF)
      @assertTrue(any(ierr_invertGF == 1))

      deallocate(test)
   end subroutine

   @test
   subroutine test_GF_reduction
      type(greensfunc), allocatable :: coarse(:, :, :)
      type(greensfunc), allocatable :: fine(:, :, :)
      integer, parameter            :: coarse_size = 2
      integer, parameter            :: fine_size = 4
      integer, parameter            :: nomega = 2
      real(real12), parameter       :: test_input = one
      complex(real12), parameter    :: test_output(coarse_size, coarse_size, coarse_size) = (8.0_real12, 8.0_real12)
      integer                       :: i, j, k, l, ierr
      integer                       :: ic, jc, kc
      logical                       :: reduce_problem = .false.

      call allocateGF(coarse, coarse_size, coarse_size, coarse_size, nomega, &
            ierr)
      @assertEqual(ierr, 0)

      call allocateGF(fine, fine_size, fine_size, fine_size, nomega, ierr)
      @assertEqual(ierr, 0)

      do ic = 1, coarse_size
         do jc = 1, coarse_size
            do kc = 1, coarse_size
               coarse(ic , jc , kc)%map = ic + (jc - 1)*coarse_size &
                  + (kc - 1)*coarse_size*coarse_size
            enddo
         enddo
      enddo

      do i = 1, fine_size
         do j = 1, fine_size
            do k = 1, fine_size
               ic = nint(real(i)/two)
               jc = nint(real(j)/two)
               kc = nint(real(k)/two)
               fine(i , j , k)%map = ic + (jc - 1)*coarse_size &
                  + (kc - 1)*coarse_size*coarse_size
               do l = 1, nomega
                  fine(i, j, k)%GF(l) = cmplx(one, one)
               enddo
            enddo
         enddo
      enddo

      call reduceGF(coarse, fine, ierr)
      @assertEqual(ierr, 0)

      reduce_problem = any(does_GF_have_problem(coarse, test_output))

      @assertFalse(reduce_problem)

   end subroutine

   @test
   subroutine test_reduceGF_ierr1() 
      type(greensfunc), allocatable :: coarse(:, :, :)
      type(greensfunc), allocatable :: fine(:, :, :)
      type(greensfunc), allocatable :: test(:, :, :)
      integer, parameter            :: coarse_size = 2
      integer, parameter            :: fine_size = 4
      integer, parameter            :: nomega = 2
      integer                       :: ierr

      call allocateGF(coarse, coarse_size, coarse_size, coarse_size, nomega, &
            ierr)
      @assertEqual(ierr, 0)

      call allocateGF(fine, fine_size, fine_size, fine_size, nomega, ierr)
      @assertEqual(ierr, 0)

      allocate(test(1, 1, 1))
      
      call reduceGF(coarse, test, ierr)
      @assertEqual(ierr, 1)

      call reduceGF(test, fine, ierr)
      @assertEqual(ierr, 1)
   end subroutine

   @test
   subroutine test_reduceGF_ierr2()
      type(greensfunc), allocatable :: coarse(:, :, :)
      type(greensfunc), allocatable :: fine(:, :, :)
      type(greensfunc), allocatable :: test(:, :, :)
      integer, parameter            :: coarse_size = 2
      integer, parameter            :: fine_size = 4
      integer, parameter            :: nomega = 2
      integer, parameter            :: nomega1 = 1
      integer                       :: ierr

      call allocateGF(coarse, coarse_size, coarse_size, coarse_size, nomega, &
            ierr)
      @assertEqual(ierr, 0)

      call allocateGF(fine, fine_size, fine_size, fine_size, nomega1, ierr)
      @assertEqual(ierr, 0)

      call reduceGF(coarse, fine, ierr)
      @assertEqual(ierr, 2)
   end subroutine

   @test
   subroutine test_reduceGF_ierr3
      type(greensfunc), allocatable :: coarse(:, :, :)
      type(greensfunc), allocatable :: fine(:, :, :)
      type(greensfunc), allocatable :: test(:, :, :)
      integer, parameter            :: coarse_size = 8
      integer, parameter            :: fine_size = 4
      integer, parameter            :: nomega = 2
      integer                       :: ierr

      call allocateGF(coarse, coarse_size, coarse_size, coarse_size, nomega, &
            ierr)
      @assertEqual(ierr, 0)

      call allocateGF(fine, fine_size, fine_size, fine_size, nomega, ierr)
      @assertEqual(ierr, 0)

      call reduceGF(coarse, fine, ierr)
      @assertEqual(ierr, 3)
   end subroutine

end module
