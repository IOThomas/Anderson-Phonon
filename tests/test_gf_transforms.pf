!//TODO prawf ar gyfer momspace_to_realspace
!//TODO prawf ar gyfer realspace_to_momspace
!//TODO prawf ar gyfer fft_on_k
!//TODO prawf ar gyfer fft_on_kdash

module test_gf_transforms

    use funit
    use constants
    use greensroutines
    use greensroutines_helper
    use gf_fourier



    implicit none
    integer, parameter      :: xsize = 4, ysize = 4, zsize = 4, nomega = 2
    integer, parameter      :: rspace_size = xsize*ysize*zsize
    type(greensfunc)        :: test_mom_space(xsize,ysize,zsize), test_rl_space(rspace_size,rspace_size)
    type(greensfunc)        :: expected_mom_space(xsize,ysize,zsize), expected_rl_space(rspace_size,rspace_size)
    real(real12), parameter :: kx = (two*pi/real(xsize+1,real12))
    real(real12), parameter :: ky = (two*pi/real(ysize+1,real12)) 
    real(real12), parameter :: kz = (two*pi/real(zsize+1,real12))
    integer                 :: ierr
    

    ! define forward and backward shifts
    integer            :: ik
    integer, parameter :: icount(rspace_size) = [( ik, ik = 1, rspace_size)]
    integer, parameter :: identity(xsize, ysize, zsize) = reshape(icount, [xsize, ysize, zsize])
    integer            :: sh_up_1(rspace_size)
    integer            :: sh_down_1(rspace_size) 
    integer            :: sh_up_2(rspace_size) 
    integer            :: sh_down_2(rspace_size) 
    integer            :: sh_up_3(rspace_size) 
    integer            :: sh_down_3(rspace_size) 

contains

    @before
    subroutine set_up()
        integer :: i, j, k, l
        complex(real12) :: rlsp_init(rspace_size, rspace_size), momsp_init(xsize,ysize,zsize)

        ierr = 0

        sh_up_1  = reshape(cshift(identity, 1, 1), [rspace_size])
        sh_down_1 = reshape(cshift(identity, -1, 1), [rspace_size])

        sh_up_2  = reshape(cshift(identity, 1, 2), [rspace_size])
        sh_down_2 = reshape(cshift(identity, -1, 2), [rspace_size])

        sh_up_3  = reshape(cshift(identity, 1, 3), [rspace_size])
        sh_down_3 = reshape(cshift(identity, -1, 3), [rspace_size])


        do i =1, xsize
            do j = 1, ysize
                do k = 1, zsize
                    allocate(test_mom_space(i,j,k)%GF(nomega), expected_mom_space(i,j,k)%GF(nomega))
                end do
            end do
        end do

        
        do i =1, rspace_size
            do j = 1, rspace_size
                allocate(test_rl_space(i,j)%GF(nomega), expected_rl_space(i,j)%GF(nomega))
            enddo
        enddo
    
      

        rlsp_init = cmplx_zero
        call initialise_GF(expected_rl_space, rlsp_init)
        do i = 1, rspace_size
            do j = 1, nomega
                expected_rl_space(i,sh_up_1(i))%GF(j) = cmplx_one
                expected_rl_space(i,sh_down_1(i))%GF(j) = cmplx_one
                expected_rl_space(i,sh_up_2(i))%GF(j) = cmplx_one
                expected_rl_space(i, sh_down_2(i))%GF(j) = cmplx_one
                expected_rl_space(i, sh_up_3(i))%GF(j) = cmplx_one
                expected_rl_space(i, sh_down_3(i))%GF(j) = cmplx_one
            end do
        end do

        momsp_init = cmplx_zero
        call initialise_GF(expected_mom_space, momsp_init)
        do i = 1, xsize
            do j = 1, ysize
                do k = 1, zsize
                    do l = 1, nomega
                        expected_mom_space(i,j,k)%GF(l) = cos(kx*real(i,real12)) + cos(ky*real(j,real12)) + cos(kz*real(k,real12))
                    end do
                end do
            end do
        end do

        call greensfunc_initplan(test_mom_space, ierr)

    end subroutine set_up

    @after
    subroutine tear_down()
        integer :: i, j, k

        do i = 1, rspace_size
            do j =1, rspace_size
                deallocate(expected_rl_space(i,j)%GF)
                deallocate(test_rl_space(i,j)%GF)
            enddo
        enddo

        do i = 1, xsize
            do j = 1, ysize
                do k = 1, zsize
                    deallocate(expected_mom_space(i,j,k)%GF)
                    deallocate(test_mom_space(i,j,k)%GF)
                enddo
            enddo
        enddo

        call greensfunc_killplan(ierr)

    end subroutine tear_down

    @test
    subroutine momentum_to_realspace()
        logical :: is_problem = .true.

        test_mom_space = expected_mom_space
        call momspace_to_realspace(test_mom_space, test_rl_space, ierr)
        @assertEqual(ierr, 0)

        if (expected_rl_space .eq. test_rl_space) is_problem = .false.

        @assertFalse(is_problem)

    end subroutine momentum_to_realspace

    @test
    subroutine real_to_momentumspace()
        logical :: is_problem = .true.

        test_rl_space = expected_rl_space
        call realspace_to_momspace(test_rl_space, test_mom_space, ierr)
        @assertEqual(ierr, 0)

        if (expected_mom_space.eq.test_mom_space) is_problem = .false.
              

        @assertFalse(is_problem)
    end subroutine real_to_momentumspace    

    @test
    subroutine cycle_real_to_real()
        logical :: is_rl_problem = .true.

        test_rl_space = expected_rl_space
        call realspace_to_momspace(test_rl_space, test_mom_space, ierr)
        @assertEqual(ierr, 0)
        call momspace_to_realspace(test_mom_space, test_rl_space, ierr)
        @assertEqual(ierr, 0)

        
        if (expected_rl_space .eq. test_rl_space) is_rl_problem = .false.
        @assertFalse(is_rl_problem)
    end subroutine cycle_real_to_real

    @test
    subroutine cycle_moment_to_moment()
        logical :: is_mom_problem = .false.
     
        test_mom_space = expected_mom_space
        call momspace_to_realspace(test_mom_space, test_rl_space, ierr)
        @assertEqual(ierr, 0)
        call realspace_to_momspace(test_rl_space, test_mom_space, ierr)
        @assertEqual(ierr, 0)

        if (expected_mom_space.eq.test_mom_space) is_mom_problem = .false.
        @assertFalse(is_mom_problem)
    end subroutine cycle_moment_to_moment

end module